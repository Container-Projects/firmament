// The Firmament project
// Copyright (c) 2011-2012 Malte Schwarzkopf <malte.schwarzkopf@cl.cam.ac.uk>
//
// BaseMessage is the root element of Firmament's message hierarchy. Any message
// can be treated as a BaseMessage, and this is the type used for transmission
// channels. Subordinate messages are implemented as optional members, and
// need to be registered in the comment below.
//
// **Note:** Protobuf message extensions have no formal inheritance relationship
// to their containers; thus, "subordinate" here is conceptual, rather than in
// terms of C++ inheritance. In particular, a subordinate message CANNOT be
// passed around or otherwise treated as a BaseMessage, including referencing it
// by BaseMessage pointers or references.

package firmament;

// Message registry:
// -------------------
// 001  - TestMessage
// 002  - HeartbeatMessage
// 003  - RegistrationMessage
// 004  - TaskHeartbeatMessage
// 005  - TaskSpawnMessage
// 006  - TaskStateMessage
// 007  - StorageRegistrationMessage
// 008  - TaskInfoRequestMessage
// 009  - TaskInfoResponseMessage
// 010  - TaskDelegationMessage
// 011  - ObtainObjectMessage
// 012  - StorageDiscoverMessage
// 013  - StorageHeartBeatMessage
// 014  - ObjectInfoMessage
// 015  - TaskKillMessage
// 016  - TaskFinalReport   XXX(malte): inconsistent name!
// -----------------------------
// libDIOS messages
// 017  - CopyRequest
// 018  - CopyResponse
// 019  - CreateRequest
// 020  - CreateResponse
// 021  - DeleteNotification
// 022  - BeginReadNotification
// 023  - EndReadNotification
// 024  - BeginWriteNotification
// 025  - EndWriteNotification
// 026  - EndWriteFinalNotification
// 027  - SelectNotification
// 028  - LookupRequest
// 029  - LookupResponse
// ...

import "messages/test_message.proto";
import "messages/heartbeat_message.proto";
import "messages/registration_message.proto";
import "messages/task_heartbeat_message.proto";
import "messages/task_spawn_message.proto";
import "messages/task_state_message.proto";
import "messages/storage_registration_message.proto";
import "messages/storage_message.proto";
import "messages/task_info_message.proto";
import "messages/task_delegation_message.proto";
import "messages/task_kill_message.proto";
import "messages/copy_message.proto";
import "messages/create_message.proto";
import "messages/delete_message.proto";
import "messages/io_notification_message.proto";
import "messages/lookup_message.proto";
import "base/task_final_report.proto";



message BaseMessage {
  // TODO(malte): Think about having a type identifier in here, and use a
  // special "batch message" type to indicate presence of multiple extensions.
  optional TestMessage test = 1;
  optional HeartbeatMessage heartbeat = 2;
  optional RegistrationMessage registration = 3;
  optional TaskHeartbeatMessage task_heartbeat = 4;
  optional TaskSpawnMessage task_spawn = 5;
  optional TaskStateMessage task_state = 6;
  optional StorageRegistrationMessage storage_registration = 7;
  optional TaskInfoRequestMessage task_info_request = 8;
  optional TaskInfoResponseMessage task_info_response = 9;
  optional TaskDelegationRequestMessage task_delegation_request = 10;
  optional TaskDelegationResponseMessage task_delegation_response = 11;
  optional ObtainObjectMessage obtain_object = 12;
  optional StorageDiscoverMessage storage_discover = 13;
  optional StorageHeartBeatMessage storage_heartbeat = 14;
  optional ObjectInfoMessage object_info = 15;
  optional TaskKillMessage task_kill = 16;
  optional TaskFinalReport task_final_report = 17;
  // -----------------------------
  // libDIOS messages
  optional CopyRequest copy_request = 18;
  optional CopyResponse copy_response = 19;
  optional CreateRequest create_request = 20;
  optional CreateResponse create_response = 21;
  optional DeleteNotification delete_notification = 22;
  optional BeginReadNotification begin_read_notification = 23;
  optional EndReadNotification end_read_notification = 24;
  optional BeginWriteNotification begin_write_notification = 25;
  optional EndWriteNotification end_write_notification = 26;
  optional EndWriteFinalNotification end_write_final_notification = 27;
  optional SelectNotification select_notification = 28;
  optional LookupRequest lookup_request = 29;
  optional LookupResponse lookup_response = 30;
}
